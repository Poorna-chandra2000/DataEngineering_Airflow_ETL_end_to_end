version: '3.9'

services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgadmin_data:/var/lib/pgadmin   # ✅ Docker-managed volume
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:7
    restart: always
    #user: "5050:5050"  # ✅ fixes permission issue
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin # ✅ named volume for persistence docker-managed
      - ./pgadmin/config/servers.json:/pgadmin4/servers.json:ro  # ✅ bind mount for custom config automatically attached the credentials
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: webserver  # ✅ REQUIRED or container exits
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: scheduler  # ✅ REQUIRED
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    depends_on:
      airflow-webserver:
        condition: service_started
      postgres:
        condition: service_healthy

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: >
      bash -c "airflow db upgrade &&
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true"
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_data:
  airflow_logs:
  airflow_data:
# version: '3.9'

# services:
#   postgres:
#     image: postgres:15
#     restart: always
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     ports:
#       - "${POSTGRES_PORT:-5432}:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   pgadmin:
#     image: dpage/pgadmin4:7
#     restart: always
#     user: "5050:5050"  # fixes permission issues
#     environment:
#       PGADMIN_DEFAULT_EMAIL: admin@example.com
#       PGADMIN_DEFAULT_PASSWORD: admin
#     ports:
#       - "8081:80"
#     volumes:
#       - pgadmin_data:/var/lib/pgadmin  # named volume for persistence
#     depends_on:
#       postgres:
#         condition: service_healthy

#   airflow-init:
#     build:
#       context: .
#       dockerfile: Dockerfile.airflow
#     command: >
#       bash -c "airflow db upgrade &&
#       airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true"
#     environment:
#       - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
#     volumes:
#       - ./dags:/opt/airflow/dags
#       - airflow_logs:/opt/airflow/logs
#       - ./plugins:/opt/airflow/plugins
#       - airflow_data:/opt/airflow/data
#     depends_on:
#       postgres:
#         condition: service_healthy

#   airflow-webserver:
#     build:
#       context: .
#       dockerfile: Dockerfile.airflow
#     command: webserver
#     environment:
#       - AIRFLOW__CORE__EXECUTOR=LocalExecutor
#       - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
#       - AIRFLOW__CORE__LOAD_EXAMPLES=False
#     volumes:
#       - ./dags:/opt/airflow/dags
#       - airflow_logs:/opt/airflow/logs
#       - ./plugins:/opt/airflow/plugins
#       - airflow_data:/opt/airflow/data
#     ports:
#       - "8080:8080"
#     depends_on:
#       postgres:
#         condition: service_healthy
#       airflow-init:
#         condition: service_completed_successfully  # ensures init finishes first

#   airflow-scheduler:
#     build:
#       context: .
#       dockerfile: Dockerfile.airflow
#     command: scheduler
#     environment:
#       - AIRFLOW__CORE__EXECUTOR=LocalExecutor
#       - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
#       - AIRFLOW__CORE__LOAD_EXAMPLES=False
#     volumes:
#       - ./dags:/opt/airflow/dags
#       - airflow_logs:/opt/airflow/logs
#       - ./plugins:/opt/airflow/plugins
#       - airflow_data:/opt/airflow/data
#     depends_on:
#       airflow-webserver:
#         condition: service_started
#       postgres:
#         condition: service_healthy

# volumes:
#   postgres_data:
#   pgadmin_data:
#   airflow_logs:
#   airflow_data:
